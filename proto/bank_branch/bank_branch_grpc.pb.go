// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: bank_branch.proto

package proto_bank_branch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BankBranchService_List_FullMethodName   = "/BankBranchService/List"
	BankBranchService_Create_FullMethodName = "/BankBranchService/Create"
	BankBranchService_Get_FullMethodName    = "/BankBranchService/Get"
	BankBranchService_Update_FullMethodName = "/BankBranchService/Update"
	BankBranchService_Delete_FullMethodName = "/BankBranchService/Delete"
)

// BankBranchServiceClient is the client API for BankBranchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankBranchServiceClient interface {
	List(ctx context.Context, in *ListBankBranchRequest, opts ...grpc.CallOption) (*ListBankBranchResponse, error)
	Create(ctx context.Context, in *CreateBankBranchRequest, opts ...grpc.CallOption) (*BankBranchProfileResponse, error)
	Get(ctx context.Context, in *SingleBankBranchRequest, opts ...grpc.CallOption) (*BankBranchProfileResponse, error)
	Update(ctx context.Context, in *UpdateBankBranchRequest, opts ...grpc.CallOption) (*BankBranchSuccessResponse, error)
	Delete(ctx context.Context, in *SingleBankBranchRequest, opts ...grpc.CallOption) (*BankBranchSuccessResponse, error)
}

type bankBranchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankBranchServiceClient(cc grpc.ClientConnInterface) BankBranchServiceClient {
	return &bankBranchServiceClient{cc}
}

func (c *bankBranchServiceClient) List(ctx context.Context, in *ListBankBranchRequest, opts ...grpc.CallOption) (*ListBankBranchResponse, error) {
	out := new(ListBankBranchResponse)
	err := c.cc.Invoke(ctx, BankBranchService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankBranchServiceClient) Create(ctx context.Context, in *CreateBankBranchRequest, opts ...grpc.CallOption) (*BankBranchProfileResponse, error) {
	out := new(BankBranchProfileResponse)
	err := c.cc.Invoke(ctx, BankBranchService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankBranchServiceClient) Get(ctx context.Context, in *SingleBankBranchRequest, opts ...grpc.CallOption) (*BankBranchProfileResponse, error) {
	out := new(BankBranchProfileResponse)
	err := c.cc.Invoke(ctx, BankBranchService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankBranchServiceClient) Update(ctx context.Context, in *UpdateBankBranchRequest, opts ...grpc.CallOption) (*BankBranchSuccessResponse, error) {
	out := new(BankBranchSuccessResponse)
	err := c.cc.Invoke(ctx, BankBranchService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankBranchServiceClient) Delete(ctx context.Context, in *SingleBankBranchRequest, opts ...grpc.CallOption) (*BankBranchSuccessResponse, error) {
	out := new(BankBranchSuccessResponse)
	err := c.cc.Invoke(ctx, BankBranchService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankBranchServiceServer is the server API for BankBranchService service.
// All implementations must embed UnimplementedBankBranchServiceServer
// for forward compatibility
type BankBranchServiceServer interface {
	List(context.Context, *ListBankBranchRequest) (*ListBankBranchResponse, error)
	Create(context.Context, *CreateBankBranchRequest) (*BankBranchProfileResponse, error)
	Get(context.Context, *SingleBankBranchRequest) (*BankBranchProfileResponse, error)
	Update(context.Context, *UpdateBankBranchRequest) (*BankBranchSuccessResponse, error)
	Delete(context.Context, *SingleBankBranchRequest) (*BankBranchSuccessResponse, error)
	mustEmbedUnimplementedBankBranchServiceServer()
}

// UnimplementedBankBranchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankBranchServiceServer struct {
}

func (UnimplementedBankBranchServiceServer) List(context.Context, *ListBankBranchRequest) (*ListBankBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBankBranchServiceServer) Create(context.Context, *CreateBankBranchRequest) (*BankBranchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBankBranchServiceServer) Get(context.Context, *SingleBankBranchRequest) (*BankBranchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBankBranchServiceServer) Update(context.Context, *UpdateBankBranchRequest) (*BankBranchSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBankBranchServiceServer) Delete(context.Context, *SingleBankBranchRequest) (*BankBranchSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBankBranchServiceServer) mustEmbedUnimplementedBankBranchServiceServer() {}

// UnsafeBankBranchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankBranchServiceServer will
// result in compilation errors.
type UnsafeBankBranchServiceServer interface {
	mustEmbedUnimplementedBankBranchServiceServer()
}

func RegisterBankBranchServiceServer(s grpc.ServiceRegistrar, srv BankBranchServiceServer) {
	s.RegisterService(&BankBranchService_ServiceDesc, srv)
}

func _BankBranchService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBankBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankBranchServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankBranchService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankBranchServiceServer).List(ctx, req.(*ListBankBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankBranchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankBranchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankBranchService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankBranchServiceServer).Create(ctx, req.(*CreateBankBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankBranchService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBankBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankBranchServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankBranchService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankBranchServiceServer).Get(ctx, req.(*SingleBankBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankBranchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankBranchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankBranchService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankBranchServiceServer).Update(ctx, req.(*UpdateBankBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankBranchService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBankBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankBranchServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankBranchService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankBranchServiceServer).Delete(ctx, req.(*SingleBankBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankBranchService_ServiceDesc is the grpc.ServiceDesc for BankBranchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankBranchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BankBranchService",
	HandlerType: (*BankBranchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BankBranchService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BankBranchService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BankBranchService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BankBranchService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BankBranchService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank_branch.proto",
}
