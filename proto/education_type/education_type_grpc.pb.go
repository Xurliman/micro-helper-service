// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: education_type/education_type.proto

package proto_education_type

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EducationTypeServiceClient is the client API for EducationTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EducationTypeServiceClient interface {
	List(ctx context.Context, in *ListEducationTypeRequest, opts ...grpc.CallOption) (*ListEducationTypeResponse, error)
	Create(ctx context.Context, in *CreateEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeProfileResponse, error)
	Get(ctx context.Context, in *SingleEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeProfileResponse, error)
	Update(ctx context.Context, in *UpdateEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeSuccessResponse, error)
	Delete(ctx context.Context, in *SingleEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeSuccessResponse, error)
}

type educationTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEducationTypeServiceClient(cc grpc.ClientConnInterface) EducationTypeServiceClient {
	return &educationTypeServiceClient{cc}
}

func (c *educationTypeServiceClient) List(ctx context.Context, in *ListEducationTypeRequest, opts ...grpc.CallOption) (*ListEducationTypeResponse, error) {
	out := new(ListEducationTypeResponse)
	err := c.cc.Invoke(ctx, "/EducationTypeService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationTypeServiceClient) Create(ctx context.Context, in *CreateEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeProfileResponse, error) {
	out := new(EducationTypeProfileResponse)
	err := c.cc.Invoke(ctx, "/EducationTypeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationTypeServiceClient) Get(ctx context.Context, in *SingleEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeProfileResponse, error) {
	out := new(EducationTypeProfileResponse)
	err := c.cc.Invoke(ctx, "/EducationTypeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationTypeServiceClient) Update(ctx context.Context, in *UpdateEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeSuccessResponse, error) {
	out := new(EducationTypeSuccessResponse)
	err := c.cc.Invoke(ctx, "/EducationTypeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationTypeServiceClient) Delete(ctx context.Context, in *SingleEducationTypeRequest, opts ...grpc.CallOption) (*EducationTypeSuccessResponse, error) {
	out := new(EducationTypeSuccessResponse)
	err := c.cc.Invoke(ctx, "/EducationTypeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EducationTypeServiceServer is the server API for EducationTypeService service.
// All implementations must embed UnimplementedEducationTypeServiceServer
// for forward compatibility
type EducationTypeServiceServer interface {
	List(context.Context, *ListEducationTypeRequest) (*ListEducationTypeResponse, error)
	Create(context.Context, *CreateEducationTypeRequest) (*EducationTypeProfileResponse, error)
	Get(context.Context, *SingleEducationTypeRequest) (*EducationTypeProfileResponse, error)
	Update(context.Context, *UpdateEducationTypeRequest) (*EducationTypeSuccessResponse, error)
	Delete(context.Context, *SingleEducationTypeRequest) (*EducationTypeSuccessResponse, error)
	mustEmbedUnimplementedEducationTypeServiceServer()
}

// UnimplementedEducationTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEducationTypeServiceServer struct {
}

func (UnimplementedEducationTypeServiceServer) List(context.Context, *ListEducationTypeRequest) (*ListEducationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEducationTypeServiceServer) Create(context.Context, *CreateEducationTypeRequest) (*EducationTypeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEducationTypeServiceServer) Get(context.Context, *SingleEducationTypeRequest) (*EducationTypeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEducationTypeServiceServer) Update(context.Context, *UpdateEducationTypeRequest) (*EducationTypeSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEducationTypeServiceServer) Delete(context.Context, *SingleEducationTypeRequest) (*EducationTypeSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEducationTypeServiceServer) mustEmbedUnimplementedEducationTypeServiceServer() {}

// UnsafeEducationTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EducationTypeServiceServer will
// result in compilation errors.
type UnsafeEducationTypeServiceServer interface {
	mustEmbedUnimplementedEducationTypeServiceServer()
}

func RegisterEducationTypeServiceServer(s grpc.ServiceRegistrar, srv EducationTypeServiceServer) {
	s.RegisterService(&EducationTypeService_ServiceDesc, srv)
}

func _EducationTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEducationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EducationTypeService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationTypeServiceServer).List(ctx, req.(*ListEducationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEducationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EducationTypeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationTypeServiceServer).Create(ctx, req.(*CreateEducationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleEducationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EducationTypeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationTypeServiceServer).Get(ctx, req.(*SingleEducationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEducationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EducationTypeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationTypeServiceServer).Update(ctx, req.(*UpdateEducationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleEducationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EducationTypeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationTypeServiceServer).Delete(ctx, req.(*SingleEducationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EducationTypeService_ServiceDesc is the grpc.ServiceDesc for EducationTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EducationTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EducationTypeService",
	HandlerType: (*EducationTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _EducationTypeService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EducationTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EducationTypeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EducationTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EducationTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "education_type/education_type.proto",
}
