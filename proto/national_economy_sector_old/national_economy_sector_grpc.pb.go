// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: national_economy_sector_old.proto

package proto_bank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NationalEconomySectorServiceClient is the client API for NationalEconomySectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NationalEconomySectorServiceClient interface {
	Create(ctx context.Context, in *CreateNationalEconomySectorRequest, opts ...grpc.CallOption) (*NationalEconomySectorProfileResponse, error)
	Read(ctx context.Context, in *SingleNationalEconomySectorRequest, opts ...grpc.CallOption) (*NationalEconomySectorProfileResponse, error)
	Update(ctx context.Context, in *UpdateNationalEconomySectorRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Delete(ctx context.Context, in *SingleNationalEconomySectorRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type nationalEconomySectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNationalEconomySectorServiceClient(cc grpc.ClientConnInterface) NationalEconomySectorServiceClient {
	return &nationalEconomySectorServiceClient{cc}
}

func (c *nationalEconomySectorServiceClient) Create(ctx context.Context, in *CreateNationalEconomySectorRequest, opts ...grpc.CallOption) (*NationalEconomySectorProfileResponse, error) {
	out := new(NationalEconomySectorProfileResponse)
	err := c.cc.Invoke(ctx, "/NationalEconomySectorService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalEconomySectorServiceClient) Read(ctx context.Context, in *SingleNationalEconomySectorRequest, opts ...grpc.CallOption) (*NationalEconomySectorProfileResponse, error) {
	out := new(NationalEconomySectorProfileResponse)
	err := c.cc.Invoke(ctx, "/NationalEconomySectorService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalEconomySectorServiceClient) Update(ctx context.Context, in *UpdateNationalEconomySectorRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/NationalEconomySectorService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalEconomySectorServiceClient) Delete(ctx context.Context, in *SingleNationalEconomySectorRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/NationalEconomySectorService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NationalEconomySectorServiceServer is the server API for NationalEconomySectorService service.
// All implementations must embed UnimplementedNationalEconomySectorServiceServer
// for forward compatibility
type NationalEconomySectorServiceServer interface {
	Create(context.Context, *CreateNationalEconomySectorRequest) (*NationalEconomySectorProfileResponse, error)
	Read(context.Context, *SingleNationalEconomySectorRequest) (*NationalEconomySectorProfileResponse, error)
	Update(context.Context, *UpdateNationalEconomySectorRequest) (*SuccessResponse, error)
	Delete(context.Context, *SingleNationalEconomySectorRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedNationalEconomySectorServiceServer()
}

// UnimplementedNationalEconomySectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNationalEconomySectorServiceServer struct {
}

func (UnimplementedNationalEconomySectorServiceServer) Create(context.Context, *CreateNationalEconomySectorRequest) (*NationalEconomySectorProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNationalEconomySectorServiceServer) Read(context.Context, *SingleNationalEconomySectorRequest) (*NationalEconomySectorProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedNationalEconomySectorServiceServer) Update(context.Context, *UpdateNationalEconomySectorRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNationalEconomySectorServiceServer) Delete(context.Context, *SingleNationalEconomySectorRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNationalEconomySectorServiceServer) mustEmbedUnimplementedNationalEconomySectorServiceServer() {
}

// UnsafeNationalEconomySectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NationalEconomySectorServiceServer will
// result in compilation errors.
type UnsafeNationalEconomySectorServiceServer interface {
	mustEmbedUnimplementedNationalEconomySectorServiceServer()
}

func RegisterNationalEconomySectorServiceServer(s grpc.ServiceRegistrar, srv NationalEconomySectorServiceServer) {
	s.RegisterService(&NationalEconomySectorService_ServiceDesc, srv)
}

func _NationalEconomySectorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNationalEconomySectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalEconomySectorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NationalEconomySectorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalEconomySectorServiceServer).Create(ctx, req.(*CreateNationalEconomySectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalEconomySectorService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleNationalEconomySectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalEconomySectorServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NationalEconomySectorService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalEconomySectorServiceServer).Read(ctx, req.(*SingleNationalEconomySectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalEconomySectorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNationalEconomySectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalEconomySectorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NationalEconomySectorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalEconomySectorServiceServer).Update(ctx, req.(*UpdateNationalEconomySectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalEconomySectorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleNationalEconomySectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalEconomySectorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NationalEconomySectorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalEconomySectorServiceServer).Delete(ctx, req.(*SingleNationalEconomySectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NationalEconomySectorService_ServiceDesc is the grpc.ServiceDesc for NationalEconomySectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NationalEconomySectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NationalEconomySectorService",
	HandlerType: (*NationalEconomySectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NationalEconomySectorService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NationalEconomySectorService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NationalEconomySectorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NationalEconomySectorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "national_economy_sector_old.proto",
}
