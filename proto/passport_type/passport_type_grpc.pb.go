// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: passport_type.proto

package proto_passport_type

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PassportTypeService_List_FullMethodName   = "/PassportTypeService/List"
	PassportTypeService_Create_FullMethodName = "/PassportTypeService/Create"
	PassportTypeService_Get_FullMethodName    = "/PassportTypeService/Get"
	PassportTypeService_Update_FullMethodName = "/PassportTypeService/Update"
	PassportTypeService_Delete_FullMethodName = "/PassportTypeService/Delete"
)

// PassportTypeServiceClient is the client API for PassportTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportTypeServiceClient interface {
	List(ctx context.Context, in *ListPassportTypeRequest, opts ...grpc.CallOption) (*ListPassportTypeResponse, error)
	Create(ctx context.Context, in *CreatePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeProfileResponse, error)
	Get(ctx context.Context, in *SinglePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeProfileResponse, error)
	Update(ctx context.Context, in *UpdatePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeSuccessResponse, error)
	Delete(ctx context.Context, in *SinglePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeSuccessResponse, error)
}

type passportTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportTypeServiceClient(cc grpc.ClientConnInterface) PassportTypeServiceClient {
	return &passportTypeServiceClient{cc}
}

func (c *passportTypeServiceClient) List(ctx context.Context, in *ListPassportTypeRequest, opts ...grpc.CallOption) (*ListPassportTypeResponse, error) {
	out := new(ListPassportTypeResponse)
	err := c.cc.Invoke(ctx, PassportTypeService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportTypeServiceClient) Create(ctx context.Context, in *CreatePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeProfileResponse, error) {
	out := new(PassportTypeProfileResponse)
	err := c.cc.Invoke(ctx, PassportTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportTypeServiceClient) Get(ctx context.Context, in *SinglePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeProfileResponse, error) {
	out := new(PassportTypeProfileResponse)
	err := c.cc.Invoke(ctx, PassportTypeService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportTypeServiceClient) Update(ctx context.Context, in *UpdatePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeSuccessResponse, error) {
	out := new(PassportTypeSuccessResponse)
	err := c.cc.Invoke(ctx, PassportTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportTypeServiceClient) Delete(ctx context.Context, in *SinglePassportTypeRequest, opts ...grpc.CallOption) (*PassportTypeSuccessResponse, error) {
	out := new(PassportTypeSuccessResponse)
	err := c.cc.Invoke(ctx, PassportTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportTypeServiceServer is the server API for PassportTypeService service.
// All implementations must embed UnimplementedPassportTypeServiceServer
// for forward compatibility
type PassportTypeServiceServer interface {
	List(context.Context, *ListPassportTypeRequest) (*ListPassportTypeResponse, error)
	Create(context.Context, *CreatePassportTypeRequest) (*PassportTypeProfileResponse, error)
	Get(context.Context, *SinglePassportTypeRequest) (*PassportTypeProfileResponse, error)
	Update(context.Context, *UpdatePassportTypeRequest) (*PassportTypeSuccessResponse, error)
	Delete(context.Context, *SinglePassportTypeRequest) (*PassportTypeSuccessResponse, error)
	mustEmbedUnimplementedPassportTypeServiceServer()
}

// UnimplementedPassportTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPassportTypeServiceServer struct {
}

func (UnimplementedPassportTypeServiceServer) List(context.Context, *ListPassportTypeRequest) (*ListPassportTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPassportTypeServiceServer) Create(context.Context, *CreatePassportTypeRequest) (*PassportTypeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPassportTypeServiceServer) Get(context.Context, *SinglePassportTypeRequest) (*PassportTypeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPassportTypeServiceServer) Update(context.Context, *UpdatePassportTypeRequest) (*PassportTypeSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPassportTypeServiceServer) Delete(context.Context, *SinglePassportTypeRequest) (*PassportTypeSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPassportTypeServiceServer) mustEmbedUnimplementedPassportTypeServiceServer() {}

// UnsafePassportTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportTypeServiceServer will
// result in compilation errors.
type UnsafePassportTypeServiceServer interface {
	mustEmbedUnimplementedPassportTypeServiceServer()
}

func RegisterPassportTypeServiceServer(s grpc.ServiceRegistrar, srv PassportTypeServiceServer) {
	s.RegisterService(&PassportTypeService_ServiceDesc, srv)
}

func _PassportTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassportTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportTypeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportTypeServiceServer).List(ctx, req.(*ListPassportTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePassportTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportTypeServiceServer).Create(ctx, req.(*CreatePassportTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePassportTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportTypeServiceServer).Get(ctx, req.(*SinglePassportTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePassportTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportTypeServiceServer).Update(ctx, req.(*UpdatePassportTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePassportTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportTypeServiceServer).Delete(ctx, req.(*SinglePassportTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassportTypeService_ServiceDesc is the grpc.ServiceDesc for PassportTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassportTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PassportTypeService",
	HandlerType: (*PassportTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PassportTypeService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PassportTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PassportTypeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PassportTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PassportTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passport_type.proto",
}
