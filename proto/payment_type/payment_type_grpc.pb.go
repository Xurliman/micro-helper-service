// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: payment_type.proto

package proto_payment_type

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentTypeService_List_FullMethodName   = "/PaymentTypeService/List"
	PaymentTypeService_Create_FullMethodName = "/PaymentTypeService/Create"
	PaymentTypeService_Get_FullMethodName    = "/PaymentTypeService/Get"
	PaymentTypeService_Update_FullMethodName = "/PaymentTypeService/Update"
	PaymentTypeService_Delete_FullMethodName = "/PaymentTypeService/Delete"
)

// PaymentTypeServiceClient is the client API for PaymentTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentTypeServiceClient interface {
	List(ctx context.Context, in *ListPaymentTypeRequest, opts ...grpc.CallOption) (*ListPaymentTypeResponse, error)
	Create(ctx context.Context, in *CreatePaymentTypeRequest, opts ...grpc.CallOption) (*PaymentTypeProfileResponse, error)
	Get(ctx context.Context, in *SinglePaymentTypeRequest, opts ...grpc.CallOption) (*PaymentTypeProfileResponse, error)
	Update(ctx context.Context, in *UpdatePaymentTypeRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Delete(ctx context.Context, in *SinglePaymentTypeRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type paymentTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentTypeServiceClient(cc grpc.ClientConnInterface) PaymentTypeServiceClient {
	return &paymentTypeServiceClient{cc}
}

func (c *paymentTypeServiceClient) List(ctx context.Context, in *ListPaymentTypeRequest, opts ...grpc.CallOption) (*ListPaymentTypeResponse, error) {
	out := new(ListPaymentTypeResponse)
	err := c.cc.Invoke(ctx, PaymentTypeService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentTypeServiceClient) Create(ctx context.Context, in *CreatePaymentTypeRequest, opts ...grpc.CallOption) (*PaymentTypeProfileResponse, error) {
	out := new(PaymentTypeProfileResponse)
	err := c.cc.Invoke(ctx, PaymentTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentTypeServiceClient) Get(ctx context.Context, in *SinglePaymentTypeRequest, opts ...grpc.CallOption) (*PaymentTypeProfileResponse, error) {
	out := new(PaymentTypeProfileResponse)
	err := c.cc.Invoke(ctx, PaymentTypeService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentTypeServiceClient) Update(ctx context.Context, in *UpdatePaymentTypeRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, PaymentTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentTypeServiceClient) Delete(ctx context.Context, in *SinglePaymentTypeRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, PaymentTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentTypeServiceServer is the server API for PaymentTypeService service.
// All implementations must embed UnimplementedPaymentTypeServiceServer
// for forward compatibility
type PaymentTypeServiceServer interface {
	List(context.Context, *ListPaymentTypeRequest) (*ListPaymentTypeResponse, error)
	Create(context.Context, *CreatePaymentTypeRequest) (*PaymentTypeProfileResponse, error)
	Get(context.Context, *SinglePaymentTypeRequest) (*PaymentTypeProfileResponse, error)
	Update(context.Context, *UpdatePaymentTypeRequest) (*SuccessResponse, error)
	Delete(context.Context, *SinglePaymentTypeRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedPaymentTypeServiceServer()
}

// UnimplementedPaymentTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentTypeServiceServer struct {
}

func (UnimplementedPaymentTypeServiceServer) List(context.Context, *ListPaymentTypeRequest) (*ListPaymentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPaymentTypeServiceServer) Create(context.Context, *CreatePaymentTypeRequest) (*PaymentTypeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPaymentTypeServiceServer) Get(context.Context, *SinglePaymentTypeRequest) (*PaymentTypeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentTypeServiceServer) Update(context.Context, *UpdatePaymentTypeRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPaymentTypeServiceServer) Delete(context.Context, *SinglePaymentTypeRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPaymentTypeServiceServer) mustEmbedUnimplementedPaymentTypeServiceServer() {}

// UnsafePaymentTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentTypeServiceServer will
// result in compilation errors.
type UnsafePaymentTypeServiceServer interface {
	mustEmbedUnimplementedPaymentTypeServiceServer()
}

func RegisterPaymentTypeServiceServer(s grpc.ServiceRegistrar, srv PaymentTypeServiceServer) {
	s.RegisterService(&PaymentTypeService_ServiceDesc, srv)
}

func _PaymentTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentTypeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentTypeServiceServer).List(ctx, req.(*ListPaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentTypeServiceServer).Create(ctx, req.(*CreatePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentTypeServiceServer).Get(ctx, req.(*SinglePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentTypeServiceServer).Update(ctx, req.(*UpdatePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentTypeServiceServer).Delete(ctx, req.(*SinglePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentTypeService_ServiceDesc is the grpc.ServiceDesc for PaymentTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentTypeService",
	HandlerType: (*PaymentTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PaymentTypeService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PaymentTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentTypeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PaymentTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_type.proto",
}
