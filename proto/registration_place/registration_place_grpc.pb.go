// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: registration_place.proto

package proto_registration_place

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegistrationPlaceService_List_FullMethodName   = "/RegistrationPlaceService/List"
	RegistrationPlaceService_Create_FullMethodName = "/RegistrationPlaceService/Create"
	RegistrationPlaceService_Get_FullMethodName    = "/RegistrationPlaceService/Get"
	RegistrationPlaceService_Update_FullMethodName = "/RegistrationPlaceService/Update"
	RegistrationPlaceService_Delete_FullMethodName = "/RegistrationPlaceService/Delete"
)

// RegistrationPlaceServiceClient is the client API for RegistrationPlaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationPlaceServiceClient interface {
	List(ctx context.Context, in *ListRegistrationPlaceRequest, opts ...grpc.CallOption) (*ListRegistrationPlaceResponse, error)
	Create(ctx context.Context, in *CreateRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceProfileResponse, error)
	Get(ctx context.Context, in *SingleRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceProfileResponse, error)
	Update(ctx context.Context, in *UpdateRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceSuccessResponse, error)
	Delete(ctx context.Context, in *SingleRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceSuccessResponse, error)
}

type registrationPlaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationPlaceServiceClient(cc grpc.ClientConnInterface) RegistrationPlaceServiceClient {
	return &registrationPlaceServiceClient{cc}
}

func (c *registrationPlaceServiceClient) List(ctx context.Context, in *ListRegistrationPlaceRequest, opts ...grpc.CallOption) (*ListRegistrationPlaceResponse, error) {
	out := new(ListRegistrationPlaceResponse)
	err := c.cc.Invoke(ctx, RegistrationPlaceService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationPlaceServiceClient) Create(ctx context.Context, in *CreateRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceProfileResponse, error) {
	out := new(RegistrationPlaceProfileResponse)
	err := c.cc.Invoke(ctx, RegistrationPlaceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationPlaceServiceClient) Get(ctx context.Context, in *SingleRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceProfileResponse, error) {
	out := new(RegistrationPlaceProfileResponse)
	err := c.cc.Invoke(ctx, RegistrationPlaceService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationPlaceServiceClient) Update(ctx context.Context, in *UpdateRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceSuccessResponse, error) {
	out := new(RegistrationPlaceSuccessResponse)
	err := c.cc.Invoke(ctx, RegistrationPlaceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationPlaceServiceClient) Delete(ctx context.Context, in *SingleRegistrationPlaceRequest, opts ...grpc.CallOption) (*RegistrationPlaceSuccessResponse, error) {
	out := new(RegistrationPlaceSuccessResponse)
	err := c.cc.Invoke(ctx, RegistrationPlaceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationPlaceServiceServer is the server API for RegistrationPlaceService service.
// All implementations must embed UnimplementedRegistrationPlaceServiceServer
// for forward compatibility
type RegistrationPlaceServiceServer interface {
	List(context.Context, *ListRegistrationPlaceRequest) (*ListRegistrationPlaceResponse, error)
	Create(context.Context, *CreateRegistrationPlaceRequest) (*RegistrationPlaceProfileResponse, error)
	Get(context.Context, *SingleRegistrationPlaceRequest) (*RegistrationPlaceProfileResponse, error)
	Update(context.Context, *UpdateRegistrationPlaceRequest) (*RegistrationPlaceSuccessResponse, error)
	Delete(context.Context, *SingleRegistrationPlaceRequest) (*RegistrationPlaceSuccessResponse, error)
	mustEmbedUnimplementedRegistrationPlaceServiceServer()
}

// UnimplementedRegistrationPlaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrationPlaceServiceServer struct {
}

func (UnimplementedRegistrationPlaceServiceServer) List(context.Context, *ListRegistrationPlaceRequest) (*ListRegistrationPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRegistrationPlaceServiceServer) Create(context.Context, *CreateRegistrationPlaceRequest) (*RegistrationPlaceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRegistrationPlaceServiceServer) Get(context.Context, *SingleRegistrationPlaceRequest) (*RegistrationPlaceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRegistrationPlaceServiceServer) Update(context.Context, *UpdateRegistrationPlaceRequest) (*RegistrationPlaceSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRegistrationPlaceServiceServer) Delete(context.Context, *SingleRegistrationPlaceRequest) (*RegistrationPlaceSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRegistrationPlaceServiceServer) mustEmbedUnimplementedRegistrationPlaceServiceServer() {
}

// UnsafeRegistrationPlaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationPlaceServiceServer will
// result in compilation errors.
type UnsafeRegistrationPlaceServiceServer interface {
	mustEmbedUnimplementedRegistrationPlaceServiceServer()
}

func RegisterRegistrationPlaceServiceServer(s grpc.ServiceRegistrar, srv RegistrationPlaceServiceServer) {
	s.RegisterService(&RegistrationPlaceService_ServiceDesc, srv)
}

func _RegistrationPlaceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistrationPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationPlaceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationPlaceService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationPlaceServiceServer).List(ctx, req.(*ListRegistrationPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationPlaceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationPlaceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationPlaceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationPlaceServiceServer).Create(ctx, req.(*CreateRegistrationPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationPlaceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRegistrationPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationPlaceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationPlaceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationPlaceServiceServer).Get(ctx, req.(*SingleRegistrationPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationPlaceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationPlaceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationPlaceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationPlaceServiceServer).Update(ctx, req.(*UpdateRegistrationPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationPlaceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRegistrationPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationPlaceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationPlaceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationPlaceServiceServer).Delete(ctx, req.(*SingleRegistrationPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistrationPlaceService_ServiceDesc is the grpc.ServiceDesc for RegistrationPlaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistrationPlaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RegistrationPlaceService",
	HandlerType: (*RegistrationPlaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RegistrationPlaceService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RegistrationPlaceService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RegistrationPlaceService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RegistrationPlaceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RegistrationPlaceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration_place.proto",
}
